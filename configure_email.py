#!/usr/bin/env python3
"""
Interactive Email Configuration Script
Helps users configure email settings for BSE Monitor
"""

import os
import getpass
from email_validator import validate_email, EmailNotValidError

def validate_email_address(email):
    """Validate email address format."""
    try:
        validate_email(email)
        return True
    except EmailNotValidError:
        return False

def configure_email():
    """Interactive email configuration."""
    print("üìß BSE Monitor - Email Configuration")
    print("=" * 50)
    print("This script will help you configure email settings for BSE alerts.")
    print()
    
    # Email provider selection
    print("Choose your email provider:")
    print("1. Gmail (Recommended)")
    print("2. Outlook/Hotmail")
    print("3. Yahoo")
    print("4. Custom SMTP")
    
    while True:
        choice = input("\nEnter your choice (1-4): ").strip()
        if choice in ['1', '2', '3', '4']:
            break
        print("‚ùå Invalid choice. Please enter 1, 2, 3, or 4.")
    
    # Set SMTP settings based on choice
    if choice == '1':  # Gmail
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        print("\n‚úÖ Gmail selected")
        print("üìù Note: You'll need to create an App Password for Gmail.")
        print("   Go to: https://myaccount.google.com/apppasswords")
        
    elif choice == '2':  # Outlook
        smtp_server = "smtp-mail.outlook.com"
        smtp_port = 587
        print("\n‚úÖ Outlook/Hotmail selected")
        
    elif choice == '3':  # Yahoo
        smtp_server = "smtp.mail.yahoo.com"
        smtp_port = 587
        print("\n‚úÖ Yahoo selected")
        
    else:  # Custom
        smtp_server = input("Enter SMTP server (e.g., smtp.gmail.com): ").strip()
        smtp_port = input("Enter SMTP port (e.g., 587): ").strip()
        try:
            smtp_port = int(smtp_port)
        except ValueError:
            smtp_port = 587
            print("‚ö†Ô∏è  Invalid port, using default: 587")
    
    print(f"\nüìß SMTP Settings: {smtp_server}:{smtp_port}")
    
    # Get sender email
    while True:
        sender_email = input("\nEnter your email address: ").strip()
        if validate_email_address(sender_email):
            break
        print("‚ùå Invalid email address. Please try again.")
    
    # Get username (usually same as email)
    username = input(f"Enter username (usually same as email) [{sender_email}]: ").strip()
    if not username:
        username = sender_email
    
    # Get password
    if choice == '1':  # Gmail
        print("\nüîê For Gmail, you need an App Password:")
        print("1. Go to https://myaccount.google.com/apppasswords")
        print("2. Enable 2-Factor Authentication if not already enabled")
        print("3. Generate an App Password for 'Mail'")
        print("4. Copy the 16-character password")
        print()
        password = getpass.getpass("Enter your Gmail App Password: ")
    else:
        password = getpass.getpass("Enter your email password: ")
    
    # Get recipient emails
    print("\nüì¨ Recipient Emails")
    print("Enter email addresses that should receive BSE alerts.")
    print("You can enter multiple emails separated by commas.")
    
    while True:
        recipients_input = input("Enter recipient emails: ").strip()
        if not recipients_input:
            print("‚ùå At least one recipient email is required.")
            continue
        
        # Split and validate each email
        recipient_emails = [email.strip() for email in recipients_input.split(',')]
        valid_emails = []
        invalid_emails = []
        
        for email in recipient_emails:
            if validate_email_address(email):
                valid_emails.append(email)
            else:
                invalid_emails.append(email)
        
        if invalid_emails:
            print(f"‚ùå Invalid emails: {', '.join(invalid_emails)}")
            continue
        
        if not valid_emails:
            print("‚ùå No valid emails provided.")
            continue
        
        break
    
    # Create .env content
    env_content = f"""# BSE Monitor Configuration
# Generated by configure_email.py

# Email Configuration
SMTP_SERVER={smtp_server}
SMTP_PORT={smtp_port}
SMTP_USERNAME={username}
SMTP_PASSWORD={password}
SENDER_EMAIL={sender_email}

# Recipient emails (comma-separated)
RECIPIENT_EMAILS={','.join(valid_emails)}

# Optional: Customize monitoring interval (in minutes)
# CHECK_INTERVAL_MINUTES=5
"""
    
    # Save configuration
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("\n‚úÖ Email configuration saved!")
    print(f"üìß Sender: {sender_email}")
    print(f"üì¨ Recipients: {', '.join(valid_emails)}")
    print(f"üîß SMTP: {smtp_server}:{smtp_port}")
    
    # Test configuration
    print("\nüß™ Testing email configuration...")
    test_configuration()
    
    return True

def test_configuration():
    """Test the email configuration."""
    try:
        # Import after configuration is saved
        from config import SMTP_SERVER, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD, SENDER_EMAIL, RECIPIENT_EMAILS
        from email_sender import EmailSender
        
        email_sender = EmailSender()
        
        if not email_sender.recipient_emails:
            print("‚ùå No recipient emails configured!")
            return False
        
        print(f"‚úÖ Found {len(email_sender.recipient_emails)} recipient(s)")
        
        # Test email sending
        success = email_sender.test_email_configuration()
        if success:
            print("‚úÖ Email test successful! Check your inbox for a test email.")
        else:
            print("‚ùå Email test failed!")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Error testing configuration: {e}")
        return False

def main():
    """Main configuration function."""
    print("üîß BSE Monitor Email Configuration")
    print("=" * 50)
    
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists.")
        overwrite = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Configuration cancelled.")
            return
    
    try:
        configure_email()
        print("\nüéâ Email configuration completed!")
        print("\nNext steps:")
        print("1. Run: python quick_test.py (to test the system)")
        print("2. Run: python start_monitor.py (to start monitoring)")
        print("3. Check your email for test alerts")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Configuration cancelled by user.")
    except Exception as e:
        print(f"\n‚ùå Error during configuration: {e}")

if __name__ == "__main__":
    main() 